# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pJUaIAU3H_ITwSKfoaX60uS3lTR3roAa
"""

import streamlit as st
import re
import io
from datetime import datetime
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from pytz import timezone

# --- Constantes ---
TIPOS_MATERIAL_BASE = {
    "v": "vegetal dessecado",
    "po": "pulverizado",
    "pd": "petrificado",
    "r": "resinoso"
}

TIPOS_EMBALAGEM_BASE = {
    "e": "microtubo do tipo eppendorf",
    "z": "embalagem do tipo ziplock",
    "a": "papel alumínio",
    "pl": "plástico",
    "pa": "papel"
}

CORES_FEMININO_EMBALAGEM = {
    "t": "transparente", "b": "branca", "az": "azul", "am": "amarela",
    "vd": "verde", "vm": "vermelha", "p": "preta", "c": "cinza",
    "m": "marrom", "r": "rosa", "l": "laranja", "violeta": "violeta", "roxa": "roxa"
}

QUANTIDADES_EXTENSO = {
    1: "uma", 2: "duas", 3: "três", 4: "quatro", 5: "cinco",
    6: "seis", 7: "sete", 8: "oito", 9: "nove", 10: "dez"
}

meses_portugues = {
    "January": "janeiro", "February": "fevereiro", "March": "março",
    "April": "abril", "May": "maio", "June": "junho", "July": "julho",
    "August": "agosto", "September": "setembro", "October": "outubro",
    "November": "novembro", "December": "dezembro"
}

# --- Funções Auxiliares ---
def pluralizar_palavra(palavra, quantidade):
    if quantidade == 1:
        return palavra
    if palavra in ["microtubo do tipo eppendorf", "embalagem do tipo ziplock"]:
        return palavra
    if palavra.endswith('m'):
        return re.sub(r'm$', 'ns', palavra)
    if palavra.endswith('ão'):
        return re.sub(r'ão$', 'ões', palavra)
    elif palavra.endswith(('r', 'z')):
        return palavra + 'es'
    else:
        return palavra + 's'

def add_paragraph(doc, text, bold=False, align='justify', size=12):
    align_map = {
        'justify': WD_ALIGN_PARAGRAPH.JUSTIFY,
        'center': WD_ALIGN_PARAGRAPH.CENTER,
        'right': WD_ALIGN_PARAGRAPH.RIGHT
    }
    p = doc.add_paragraph()
    p.alignment = align_map.get(align, WD_ALIGN_PARAGRAPH.JUSTIFY)
    run = p.add_run(text)
    run.bold = bold
    run.font.size = Pt(size)

# --- Configuração do Tema ---
def setup_theme():
    if 'theme' not in st.session_state:
        st.session_state.theme = 'light'

    st.markdown(f"""
        <style>
            :root {{
                --primary-color: {'#ffffff' if st.session_state.theme == 'light' else '#1a1a1a'};
                --secondary-color: {'#f0f2f6' if st.session_state.theme == 'light' else '#2d2d2d'};
                --text-color: {'#000000' if st.session_state.theme == 'light' else '#ffffff'};
            }}
            .stApp {{
                background-color: var(--primary-color);
                color: var(--text-color);
            }}
            .ios-toggle {{
                position: relative;
                display: inline-block;
                width: 60px;
                height: 34px;
            }}
            .ios-toggle input {{
                opacity: 0;
                width: 0;
                height: 0;
            }}
            .slider {{
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: #ccc;
                transition: .4s;
                border-radius: 34px;
            }}
            .slider:before {{
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                transition: .4s;
                border-radius: 50%;
            }}
            input:checked + .slider {{
                background-color: #2196F3;
            }}
            input:checked + .slider:before {{
                transform: translateX(26px);
            }}
            .stButton>button {{
                border-radius: 20px;
                border: 1px solid {'#cccccc' if st.session_state.theme == 'light' else '#4d4d4d'};
                background-color: var(--secondary-color);
                color: var(--text-color);
                padding: 10px 24px;
                transition: all 0.3s;
            }}
            .stButton>button:hover {{
                transform: scale(1.05);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }}
        </style>
    """, unsafe_allow_html=True)

# --- Geração do Laudo ---
def gerar_laudo(inputs, lacre):
    document = Document()

    # Seção 2
    add_paragraph(document, "2 MATERIAL RECEBIDO PARA EXAME (Ilustração 1)", bold=True)

    subitens_cannabis = {}
    subitens_cocaina = {}

    for idx, item in enumerate(inputs):
        qtd = item['qtd']
        tipo_mat = item['tipo_mat']
        emb = item['emb']
        cor_emb = item['cor_emb']
        ref = item['ref']
        pessoa = item['pessoa']

        tipo_material = TIPOS_MATERIAL_BASE.get(tipo_mat, tipo_mat)
        embalagem = TIPOS_EMBALAGEM_BASE.get(emb, emb)

        if cor_emb:
            cor = CORES_FEMININO_EMBALAGEM.get(cor_emb, cor_emb)
            embalagem += f" de cor {cor}"

        embalagem = pluralizar_palavra(embalagem, qtd)
        porcao = pluralizar_palavra("porção", qtd)
        acond = "acondicionada em" if qtd == 1 else "acondicionadas, individualmente, em"
        ref_texto = f", relacionada a {pessoa}" if pessoa else ""

        texto = f"2.{idx+1} {qtd} ({QUANTIDADES_EXTENSO.get(qtd, str(qtd))}) {porcao} de material {tipo_material}, {acond} {embalagem}, referente à amostra do subitem {ref} do laudo de constatação supracitado{ref_texto}."
        add_paragraph(document, texto)

        if tipo_mat in ["v", "r"]:
            subitens_cannabis[ref] = f"2.{idx+1}"
        elif tipo_mat in ["po", "pd"]:
            subitens_cocaina[ref] = f"2.{idx+1}"

   # 3 OBJETIVO DOS EXAMES
    add_paragraph(document, "\n3 OBJETIVO DOS EXAMES", bold=True)
    add_paragraph(document, "Visa esclarecer à autoridade requisitante quanto às características do material apresentado, bem como se ele contém substância de uso proscrito no Brasil e capaz de causar dependência física e/ou psíquica. O presente laudo pericial busca demonstrar a materialidade da infração penal apurada.", align='justify')

    # 4 EXAMES
    add_paragraph(document, "\n4 EXAMES", bold=True)
    has_cannabis_item = bool(subitens_cannabis)
    has_cocaina_item = bool(subitens_cocaina)

    if has_cannabis_item:
        add_paragraph(document, "4.1 Exames realizados para pesquisa de Cannabis sativa L. (maconha)")
        add_paragraph(document, "4.1.1 Ensaio químico com Fast blue salt B: teste de cor em reação com solução aquosa de sal de azul sólido B em meio alcalino;")
        add_paragraph(document, "4.1.2 Cromatografia em Camada Delgada (CCD), comparativa com substância padrão, em sistemas contendo eluentes apropriados e posterior revelação com solução aquosa de azul sólido B.")
    if has_cocaina_item:
        idx = "4.2" if has_cannabis_item else "4.1"
        add_paragraph(document, f"{idx} Exames realizados para pesquisa de cocaína")
        add_paragraph(document, f"{idx}.1 Ensaio químico com teste de tiocianato de cobalto-reação de cor com solução de tiocianato de cobalto em meio ácido;")
        add_paragraph(document, f"{idx}.2 Cromatografia em Camada Delgada (CCD), comparativa com substância padrão, em sistemas com eluentes apropriados e revelação com solução de iodo platinado.")
    if not has_cannabis_item and not has_cocaina_item:
        add_paragraph(document, "4.1 Exames realizados")
        add_paragraph(document, "4.1.1 Exame macroscópico;")

    # 5 RESULTADOS
    add_paragraph(document, "\n5 RESULTADOS", bold=True)
    if has_cannabis_item:
        subitens = " e ".join(subitens_cannabis.keys())
        label = "no subitem" if len(subitens_cannabis) == 1 else "nos subitens"
        add_paragraph(document, f"5.1 Resultados obtidos para o(s) material(is) descrito(s) {label} {subitens}:")
        add_paragraph(document, "5.1.1 No ensaio com Fast blue salt B, foram obtidas coloração característica para canabinol e tetrahidrocanabinol (princípios ativos da Cannabis sativa L.).")
        add_paragraph(document, "5.1.2 Na CCD, obtiveram-se perfis cromatográficos coincidentes com o material de referência (padrão de Cannabis sativa L.); portanto, a substância tetrahidrocanabinol está presente nos materiais questionados.")
    if has_cocaina_item:
        idx = "5.2" if has_cannabis_item else "5.1"
        subitens = " e ".join(subitens_cocaina.keys())
        label = "no subitem" if len(subitens_cocaina) == 1 else "nos subitens"
        add_paragraph(document, f"{idx} Resultados obtidos para o(s) material(is) descrito(s) {label} {subitens}:")
        add_paragraph(document, f"{idx}.1 No teste de tiocianato de cobalto, foram obtidas coloração característica para cocaína;")
        add_paragraph(document, f"{idx}.2 Na CCD, obteve-se perfis cromatográficos coincidentes com o material de referência (padrão de cocaína); portanto, a substância cocaína está presente nos materiais questionados.")

    # 6 CONCLUSÃO
    add_paragraph(document, "\n6 CONCLUSÃO", bold=True)
    conclusoes = []
    if has_cannabis_item:
        subitens = " e ".join(subitens_cannabis.keys())
        label = "no subitem" if len(subitens_cannabis) == 1 else "nos subitens"
        conclusoes.append(f"no(s) material(is) descrito(s) {label} {subitens}, foi detectada a presença de partes da planta Cannabis sativa L., vulgarmente conhecida por maconha. A Cannabis sativa L. contém princípios ativos chamados canabinóis, dentre os quais se encontra o tetrahidrocanabinol, substância perturbadora do sistema nervoso central. Tanto a Cannabis sativa L. quanto a tetrahidrocanabinol são proscritas no país, com fulcro na Portaria nº 344/1998, atualizada por meio da RDC nº 970, de 19/03/2025, da Anvisa.")
    if has_cocaina_item:
        subitens = " e ".join(subitens_cocaina.keys())
        conclusoes.append(f"no(s) material(is) descrito(s) no(s) subitem(ns) {subitens}, foi detectada a presença de cocaína, substância alcaloide estimulante do sistema nervoso central. A cocaína é proscrita no país, com fulcro na Portaria nº 344/1998, atualizada por meio da RDC nº 970, de 19/03/2025, da Anvisa.")

    if conclusoes:
        texto_final = "A partir das análises realizadas, conclui-se que, " + " Outrossim, ".join(conclusoes)
    else:
        texto_final = "A partir das análises realizadas, conclui-se que não foram detectadas substâncias de uso proscrito nos materiais analisados."
    add_paragraph(document, texto_final, align='justify')

    # 7 CUSTÓDIA DO MATERIAL
    add_paragraph(document, "\n7 CUSTÓDIA DO MATERIAL", bold=True)
    add_paragraph(document, "7.1 Contraprova")
    add_paragraph(document, f"7.1.1 A amostra contraprova ficará armazenada neste Instituto, conforme Portaria 0003/2019/SSP  (Lacre nº {lacre}).")

    # REFERÊNCIAS
    add_paragraph(document, "\nREFERÊNCIAS", bold=True)
    referencias = [
        "BRASIL. Ministério da Saúde. Portaria SVS/MS n° 344, de 12 de maio de 1998. Aprova o regulamento técnico sobre substâncias e medicamentos sujeitos a controle especial. Diário Oficial da União: Brasília, DF, p. 37, 19 maio 1998. Alterada pela RDC nº 970, de 19/03/2025.",
        "GOIÁS. Secretaria de Estado da Segurança Pública. Portaria nº 0003/2019/SSP de 10 de janeiro de 2019. Regulamenta a apreensão, movimentação, exames, acondicionamento, armazenamento e destruição de drogas no âmbito da Secretaria de Estado da Segurança Pública. Diário Oficial do Estado de Goiás: n° 22.972, Goiânia, GO, p. 4-5, 15 jan. 2019.",
        "SWGDRUG: Scientific Working Group for the Analysis of Seized Drugs. Recommendations. Version 8.0 june. 2019. Disponível em: http://www.swgdrug.org/Documents/SWGDRUG%20Recommendations%20Version%208_FINAL_ForPosting_092919.pdf. Acesso em: 07/10/2019."
    ]
    if has_cannabis_item:
        referencias.append("UNODC (United Nations Office on Drugs and Crime). Laboratory and scientific section. Recommended Methods for the Identification and Analysis of Cannabis and Cannabis Products. New York: 2012.")
    if has_cocaina_item:
        referencias.append("UNODC (United Nations Office on Drugs and Crime). Laboratory and Scientific Section. Recommended Methods for the Identification and Analysis of Cocaine in Seized Materials. New York: 2012.")
    for ref in referencias:
        add_paragraph(document, ref)

    brasilia_tz = timezone('America/Sao_Paulo')
    hoje = datetime.now(brasilia_tz)
    data_formatada = f"Goiânia, {hoje.day} de {meses_portugues[hoje.strftime('%B')]} de {hoje.year}."
    add_paragraph(document, data_formatada, align='right')

    add_paragraph(document, "\nLaudo assinado digitalmente com dados do assinador à esquerda das páginas", align='left')
    add_paragraph(document, "Daniel Chendes Lima", align='center')
    add_paragraph(document, "Perito Criminal", align='center')

    # Aplicar fonte Gadugi a todo o documento e itálico apenas nas expressões específicas
    italics = [
        'Cannabis sativa',
        'Scientific Working Group for the Analysis of Seized Drugs',
        'United Nations Office on Drugs and Crime',
        'Fast blue salt B',
        'eppendorf',
        'ziplock'
    ]

    for paragraph in document.paragraphs:
        full_text = paragraph.text
        is_ilustracao = "Ilustração 1 – Material recebido para exame." in full_text
        paragraph.clear()
        idx = 0
        while idx < len(full_text):
            match_found = False
            for phrase in italics:
                if full_text[idx:].startswith(phrase):
                    run = paragraph.add_run(phrase)
                    run.font.name = 'Gadugi'
                    run.font.size = Pt(10) if is_ilustracao else Pt(12)
                    run.italic = True
                    idx += len(phrase)
                    match_found = True
                    break
            if not match_found:
                run = paragraph.add_run(full_text[idx])
                run.font.name = 'Gadugi'
                run.font.size = Pt(10) if is_ilustracao else Pt(12)
                idx += 1

    numero_laudo = input("Digite o RG da perícia: ")
    nome_arquivo = f"{numero_laudo}.docx"
    document.save(nome_arquivo)
    files.download(nome_arquivo)


    return document

# --- Interface Principal ---
def main():
    setup_theme()

    # Cabeçalho com Toggle
    col1, col2 = st.columns([4, 1])
    with col1:
        st.title("Gerador de Laudo Pericial 🔍")
    with col2:
        st.markdown("""
            <div style="margin-top: 30px;">
                <label class="ios-toggle">
                    <input type="checkbox" onchange="toggleTheme()" {'checked' if st.session_state.theme == 'dark' else ''}>
                    <span class="slider"></span>
                </label>
            </div>
            <script>
                function toggleTheme() {
                    const theme = document.querySelector('input').checked ? 'dark' : 'light';
                    fetch(`/?theme=${theme}`, {method: 'POST'}).then(() => window.location.reload());
                }
            </script>
        """, unsafe_allow_html=True)

    # Upload de Imagem
    uploaded_image = st.file_uploader("📤 Upload da Imagem de Referência", type=["png", "jpg", "jpeg"])
    if uploaded_image:
        st.image(uploaded_image, caption="Imagem Anexada", use_column_width=True)

    # Formulário
    with st.form("laudo_form"):
        num_itens = st.number_input("Número de Itens", min_value=1, max_value=10, value=1)
        lacre = st.text_input("Número do Lacre da Contraprova")

        inputs = []
        for i in range(num_itens):
            with st.expander(f"Item {i+1}"):
                qtd = st.number_input(f"Quantidade de Porções", min_value=1, max_value=10, key=f"qtd_{i}")
                tipo_mat = st.selectbox(f"Tipo de Material", options=list(TIPOS_MATERIAL_BASE.keys()), key=f"mat_{i}")
                emb = st.selectbox(f"Tipo de Embalagem", options=list(TIPOS_EMBALAGEM_BASE.keys()), key=f"emb_{i}")
                cor_emb = None
                if emb in ['pl', 'pa']:
                    cor_emb = st.selectbox(f"Cor da Embalagem", options=list(CORES_FEMININO_EMBALAGEM.keys()), key=f"cor_{i}")
                ref = st.text_input(f"Referência do Subitem", key=f"ref_{i}")
                pessoa = st.text_input(f"Pessoa Relacionada (opcional)", key=f"pessoa_{i}")

                inputs.append({
                    'qtd': qtd,
                    'tipo_mat': tipo_mat,
                    'emb': emb,
                    'cor_emb': cor_emb,
                    'ref': ref,
                    'pessoa': pessoa
                })

        submitted = st.form_submit_button("Gerar Laudo 📄")

    # Geração e Download
    if submitted:
        document = gerar_laudo(inputs, lacre)
        doc_bytes = io.BytesIO()
        document.save(doc_bytes)
        doc_bytes.seek(0)

        st.success("Laudo gerado com sucesso!")
        st.download_button(
            label="⬇️ Download do Laudo",
            data=doc_bytes,
            file_name=f"laudo_{datetime.now().strftime('%Y%m%d%H%M')}.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

if __name__ == "__main__":
    # Obter parâmetros da URL (para versões mais novas do Streamlit)
    query_params = st.query_params if hasattr(st, 'query_params') else st.experimental_get_query_params()
    
    # Verificar e definir tema
    if 'theme' in query_params:
        theme_param = query_params['theme']
        if isinstance(theme_param, list):  # Se houver múltiplos valores
            theme_param = theme_param[0]
        if theme_param in ['light', 'dark']:
            st.session_state.theme = theme_param
    
    main()
